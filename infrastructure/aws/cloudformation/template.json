{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "CloudFormation Template for CSYE 6225 - Fall 2017",
	"Parameters": {
		"ImageId": {
			"Type": "String"
		},
		"InstanceType": {

			"Type": "String"
		},
		"KeyName": {
			"Type": "String"
		},
		"DBEngine": {
			"Type": "String"
		},
		"EngineVersion": {
			"Type": "String"
		},
		"DBInstanceClass": {
			"Type": "String"
		},
		"DBInstanceIdentifier": {
			"Type": "String"
		},
		"MasterUsername": {
			"Type": "String"
		},
		"MasterPassword": {
			"Type": "String"
		},
		"DBName": {
			"Type": "String"
		},
		"DynamoDBTableName": {
			"Type": "String"
		},
		"BucketName": {
			"Type": "String"
		},
		"VpcId": {
			"Type": "String"
		},
		"SubnetId": {
			"Type": "String"
		},
		"SubnetId2": {
			"Type": "String"
		},
		"SubnetId3": {
			"Type": "String"
		},
		"SubnetId4": {
			"Type": "String"
		},
		"HostedZoneId": {
			"Type": "String"
		},
		"HostedZoneName": {
			"Type": "String"
		},
		"User1": {
			"Type": "String"
		},
		"User2": {
			"Type": "String"
		},
		"Region": {
			"Type": "String"
		},
		"AvailabilityZone":{
			"Type": "String"
		}
	},
	"Resources": {

		"SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable HTTP access via port 80, SSH access via port 22, HTTPS via port 443",
				"VpcId": {
					"Ref": "VpcId"
				},
				"GroupName": "csye6225-webapp",
				"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"SourceSecurityGroupId": {
							"Fn::GetAtt": [
								"LoadBalancerSecurityGroup",
								"GroupId"
							]
						}
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"SourceSecurityGroupId": {
							"Fn::GetAtt": [
								"LoadBalancerSecurityGroup",
								"GroupId"
							]
						}
					}
				]
			}
		},
		"LoadBalancerSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupName": "csye6225-fall2017-loadBalancer",
				"GroupDescription": "Rules For LoadBalancer",
				"VpcId": {"Ref": "VpcId"},
				"SecurityGroupIngress": [
					{
						"IpProtocol": "tcp",
						"FromPort": "80",
						"ToPort": "80",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "22",
						"ToPort": "22",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIp": "0.0.0.0/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "443",
						"ToPort": "443",
						"CidrIpv6": "::/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIpv6": "::/0"
					},
					{
						"IpProtocol": "tcp",
						"FromPort": "8080",
						"ToPort": "8080",
						"CidrIp": "0.0.0.0/0"
					}
				]
			}
		},
		"DbSecurityByEC2SecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Open database for access",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": "3306",
					"ToPort": "3306",
					"SourceSecurityGroupId": {
						"Fn::GetAtt": [
							"SecurityGroup",
							"GroupId"
						]
					}
				}]
			}
		},
		"WebServerLogGroup": {
			"Type": "AWS::Logs::LogGroup",
			"Properties": {
				"RetentionInDays": 7
			}
		},
		"WebServerGroup": {
      			"Type": "AWS::AutoScaling::AutoScalingGroup",
      				"Properties": {
				"Tags": [{
				  "Key": "NASP",
				  "Value": "CSYE6225",
				  "PropagateAtLaunch": true
				}],
				"VPCZoneIdentifier": [
				  {
				    "Ref": "SubnetId"
				  },
				  {
				    "Ref": "SubnetId2"
				  }
				],
				"LaunchConfigurationName": {
				  "Ref": "LaunchConfig"
				},
				"MinSize": "3",
				"MaxSize": "6",
				"TargetGroupARNs": [
				  {
				    "Ref": "myTargetGroup"
				  }
				]
			      },
			      "DependsOn": [
				"Listener",
				"LaunchConfig"
			      ]
			    },
		"MyLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internet-facing",
				"Subnets": [
					{
						"Ref": "SubnetId"
					},
					{
						"Ref": "SubnetId2"
					}
				],
				"LoadBalancerAttributes": [
					{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "60"
					}
				],
				"SecurityGroups": [
					{
						"Ref": "LoadBalancerSecurityGroup"
					}
				],
				"Tags": [
					{
						"Key": "NASP",
						"Value": "CSYE6225"
					}
				]
			}
		},
		"Listener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"Certificates": [
					{
						"CertificateArn": "arn:aws:acm:us-east-1:280829830563:certificate/7bf20799-e3e9-41d4-b139-c71d7a60d0ce"
					}
				],
				"DefaultActions": [
					{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "myTargetGroup"
						}
					}
				],
				"LoadBalancerArn": {
					"Ref": "MyLoadBalancer"
				},
				"Port": "443",
				"Protocol": "HTTPS"
			}
		},
		"myTargetGroup": {
			"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties": {
				"HealthCheckIntervalSeconds": 40,
				"HealthCheckTimeoutSeconds": 30,
				"Protocol": "HTTP",
				"HealthCheckProtocol": "HTTP",
				"HealthCheckPort": "8080",
				"TargetGroupAttributes": [
					{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "20"
					}
				],
				"Port": 8080,
				"VpcId": {"Ref": "VpcId"},
				"Tags": [
					{
						"Key": "NASP",
						"Value": "CSYE6225"
					}
				]
			}
		}
		,
		"LaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"AssociatePublicIpAddress": true,
				"ImageId": {
					"Ref": "ImageId"
				},
				"SecurityGroups": [
					{
						"Fn::GetAtt": [
							"SecurityGroup",
							"GroupId"
						]
					}
				],
				"InstanceType": {"Ref": "InstanceType"},
				"IamInstanceProfile": {
					"Ref": "MyIamProfile"
				},
				"KeyName": {
					"Ref": "KeyName"
				},
				"BlockDeviceMappings": [
					{
						"DeviceName": "/dev/sda1",
						"Ebs": {
							"VolumeSize": "16",
							"VolumeType": "gp2"
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n", [
								"#!/bin/bash",
								"sudo apt-get update",
								"sudo apt-get install openjdk-8-jre-headless -y \n",
								"sudo apt-get install python -y \n",
								"sudo apt-get install tomcat8 -y \n",
								"sudo service tomcat8 start \n",
								"sudo apt-get update",
								"sudo apt-get install ruby -y \n",
								"sudo apt-get install wget \n",
								"cd /home/ubuntu",
								"wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install\n",
								"sudo chmod +x ./install",
								"sudo ./install auto \n",
								"sudo service codedeploy-agent start \n",
								"sudo service codedeploy-agent status \n",
								"cd /usr/share/tomcat8/bin",
								"sudo touch setenv.sh",
								"sudo chmod 700 setenv.sh",
								"sudo echo '#!/bin/sh' >> setenv.sh",
								{
									"Fn::Join": [
										"", [
											"echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.url=jdbc:mysql://",
											{
												"Fn::GetAtt": [
													"DBInstance",
													"Endpoint.Address"
												]
											},
											":3306/csye6225\"' >> setenv.sh"
										]
									]
								},
								"echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.username=csye6225master\"' >> setenv.sh",
								"echo 'JAVA_OPTS=\"$JAVA_OPTS -Dspring.datasource.password=csye6225password\"' >> setenv.sh",
								"sudo chmod +x setenv.sh",
								"sudo chown tomcat8:tomcat8 setenv.sh",
								"cd /var/lib/tomcat8/webapps",
								"sudo rm -r ROOT",
								"mkdir /tmp/cwlogs/",
								"touch /tmp/cwlogs/apacheaccess.conf",
								"echo '[general]' >> /tmp/cwlogs/apacheaccess.conf",
								"echo 'state_file= /var/awslogs/agent-state\n' >> /tmp/cwlogs/apacheaccess.conf",
								"echo '[logstream1]' >> /tmp/cwlogs/apacheaccess.conf",
								"echo 'file = /var/lib/tomcat8/logs/catalina.out' >> /tmp/cwlogs/apacheaccess.conf",
								{
									"Fn::Join": [
										"", [
											"echo 'log_group_name = ",
											{
												"Ref": "WebServerLogGroup"
											},
											"' >> /tmp/cwlogs/apacheaccess.conf"
										]
									]
								},
								{
									"Fn::Join": [
										"", [
											"echo 'log_stream_name = ",
											"team-log-stream' >> /tmp/cwlogs/apacheaccess.conf"
										]
									]
								},
								"echo 'datetime_format = %d/%b/%Y:%H:%M:%S' >> /tmp/cwlogs/apacheaccess.conf",
								"chmod +r /tmp/cwlogs/apacheaccess.conf",
								"chown apache:apache /tmp/cwlogs/apacheaccess.conf",
								"curl https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py -O",

								{
									"Fn::Join": [
										"", [
											"python awslogs-agent-setup.py -n -r ",
											{
												"Ref": "AWS::Region"
											},
											" -c /tmp/cwlogs/apacheaccess.conf || error_exit 'Cloud Watch Failed'"
										]
									]
								},
								"cd /etc/systemd/system",
								"sudo touch awslogs.service",
								"sudo chmod 777 awslogs.service",
								"sudo echo '[Unit]' >> awslogs.service",
								"sudo echo 'Description=Service for CloudWatch Logs agent' >> awslogs.service",
								"sudo echo 'After=rc-local.service'>> awslogs.service",
								"sudo echo '[Service]'>> awslogs.service",
								"sudo echo 'Type=simple'>> awslogs.service",
								"sudo echo 'Restart=always'>> awslogs.service",
								"sudo echo 'TimeoutSec=infinity'>> awslogs.service",
								"sudo echo 'PDFFile=/var/awslogs/state/awslogs.pid'>> awslogs.service",
								"sudo echo 'ExecStart=/var/awslogs/bin/awslogs-agent-launcher.sh --start --background --pidfile $PIDFILE --user awslogs --chuid awslogs &amp;'>> awslogs.service",
								"sudo echo '[Install]'>> awslogs.service",
								"sudo echo 'WantedBy=multi-user.target'>> awslogs.service",
								"sudo systemctl start awslogs.service",
								"sudo systemctl stop awslogs.service",
								"sudo systemctl restart awslogs.service",
								"sudo systemctl enable awslogs.service"
							]
						]
					}
				}
			}
		},
		"DBInstance": {
			"Type": "AWS::RDS::DBInstance",
			"Properties": {
				"AllocatedStorage": "100",
				"Engine": {
					"Ref": "DBEngine"
				},
				"EngineVersion": {
					"Ref": "EngineVersion"
				},
				"DBInstanceClass": {
					"Ref": "DBInstanceClass"
				},
				"MultiAZ": "false",
				"DBInstanceIdentifier": {
					"Ref": "DBInstanceIdentifier"
				},
				"MasterUsername": {
					"Ref": "MasterUsername"
				},
				"MasterUserPassword": {
					"Ref": "MasterPassword"
				},
				"DBSubnetGroupName": {
					"Ref": "DBSubnet"
				},
				"VPCSecurityGroups": [{
					"Fn::GetAtt": ["DbSecurityByEC2SecurityGroup", "GroupId"]
				}],
				"PubliclyAccessible": "false",
				"DBName": {
					"Ref": "DBName"
				}
			}

		},
		"DynamoDBTable": {
			"Type": "AWS::DynamoDB::Table",
			"Properties": {
				"AttributeDefinitions": [{
					"AttributeName": "username",
					"AttributeType": "S"
				}],
				"KeySchema": [{
					"AttributeName": "username",
					"KeyType": "HASH"
				}],
				"ProvisionedThroughput": {
					"ReadCapacityUnits": "5",
					"WriteCapacityUnits": "5"
				},
				"TableName": {
					"Ref": "DynamoDBTableName"
				},
				"TimeToLiveSpecification": {
					"AttributeName": "ttl",
					"Enabled": true
				}
			}
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket",
			"Description": "Name of S3 bucket to hold website content",
			"Properties": {
				"AccessControl": "PublicRead",
				"BucketName": {
					"Ref": "BucketName"
				}
			}
		},
		"DBSubnet": {
			"Type": "AWS::RDS::DBSubnetGroup",
			"Properties": {
				"DBSubnetGroupDescription": "description",
				"SubnetIds": [{
					"Ref": "SubnetId"
				}, {
					"Ref": "SubnetId2"
				}]
			}
		},
		"myDNSRecord": {
			"Type": "AWS::Route53::RecordSet",
			"Properties": {
				"HostedZoneId": {
					"Ref": "HostedZoneId"
				},
				"Name": {
					"Ref": "HostedZoneName"
				},
				"Comment": "DNS name for my instance.",
				"Type": "A",
				"AliasTarget": {
					"HostedZoneId": {
						"Fn::GetAtt": [
							"MyLoadBalancer",
							"CanonicalHostedZoneID"
						]
					},
					"DNSName": {
						"Fn::GetAtt": [
							"MyLoadBalancer",
							"DNSName"
						]
					}
				}
			}
		},
		"CodeDeployEC2ServiceRolenew": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/AmazonRDSFullAccess",
					"arn:aws:iam::aws:policy/AmazonS3FullAccess",
					"arn:aws:iam::aws:policy/AmazonSNSFullAccess"
				],
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Action": "sts:AssumeRole",
						"Principal": {
							"Service": "ec2.amazonaws.com"
						},
						"Effect": "Allow"
					}]
				},
				"Policies": [{
					"PolicyName": "CodeDeploy-EC2-S3new",
					"PolicyDocument": {

						"Version": "2012-10-17",
						"Statement": [{
							"Action": [
								"s3:Get*",
								"s3:List*"
							],
							"Effect": "Allow",
							"Resource": "*"
						}]
					}
				}]
			}
		},
		"CodeDeployServiceRolenew": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Action": "sts:AssumeRole",
						"Principal": {
							"Service": "ec2.amazonaws.com"
						},
						"Effect": "Allow"
					}]
				},
				"Policies": [{
					"PolicyName": "AWSCodeDeployRolenew",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"autoscaling:CompleteLifecycleAction",
								"autoscaling:DeleteLifecycleHook",
								"autoscaling:DescribeAutoScalingGroups",
								"autoscaling:DescribeLifecycleHooks",
								"autoscaling:PutLifecycleHook",
								"autoscaling:RecordLifecycleActionHeartbeat",
								"autoscaling:CreateAutoScalingGroup",
								"autoscaling:UpdateAutoScalingGroup",
								"autoscaling:EnableMetricsCollection",
								"autoscaling:DescribeAutoScalingGroups",
								"autoscaling:DescribePolicies",
								"autoscaling:DescribeScheduledActions",
								"autoscaling:DescribeNotificationConfigurations",
								"autoscaling:DescribeLifecycleHooks",
								"autoscaling:SuspendProcesses",
								"autoscaling:ResumeProcesses",
								"autoscaling:AttachLoadBalancers",
								"autoscaling:PutScalingPolicy",
								"autoscaling:PutScheduledUpdateGroupAction",
								"autoscaling:PutNotificationConfiguration",
								"autoscaling:PutLifecycleHook",
								"autoscaling:DescribeScalingActivities",
								"autoscaling:DeleteAutoScalingGroup",
								"ec2:DescribeInstances",
								"ec2:DescribeInstanceStatus",
								"ec2:TerminateInstances",
								"tag:GetTags",
								"tag:GetResources",
								"sns:Publish",
								"cloudwatch:DescribeAlarms",
								"cloudwatch:PutMetricAlarm",
								"elasticloadbalancing:DescribeLoadBalancers",
								"elasticloadbalancing:DescribeInstanceHealth",
								"elasticloadbalancing:RegisterInstancesWithLoadBalancer",
								"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
								"elasticloadbalancing:DescribeTargetGroups",
								"elasticloadbalancing:DescribeTargetHealth",
								"elasticloadbalancing:RegisterTargets",
								"elasticloadbalancing:DeregisterTargets"
							],
							"Resource": [
								"*"
							]
						}]
					}
				}]
			}
		},

		"TravisUploadToS3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "Travis-Upload-To-S3",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"s3:PutObject"
						],
						"Resource": [
							"*"
						]
					}]
				},
				"Users": [{
					"Ref": "User1"
				}, {
					"Ref": "User2"
				}]
			}
		},

		"TravisCodeDeploy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "Travis-Code-Deploy",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"codedeploy:RegisterApplicationRevision",
								"codedeploy:GetApplicationRevision"
							],
							"Resource": [
								"*"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"codedeploy:CreateDeployment",
								"codedeploy:GetDeployment"
							],
							"Resource": [
								"*"
							]
						},
						{
							"Effect": "Allow",
							"Action": [
								"codedeploy:GetDeploymentConfig"
							],
							"Resource": [
								"*"
							]
						}
					]
				},
				"Users": [{
					"Ref": "User1"
				}, {
					"Ref": "User2"
				}]
			}
		},
		"CodeDeployEC2S3": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "CodeDeploy-EC2-S3",
				"PolicyDocument": {

					"Version": "2012-10-17",
					"Statement": [{
							"Effect": "Allow",
							"Action": [
								"s3:GetBucketLocation",
								"s3:ListAllMyBuckets"
							],
							"Resource": "*"
						},
						{
							"Effect": "Allow",
							"Action": ["s3:ListBucket"],
							"Resource": ["arn:aws:s3:::test"]
						},
						{
							"Effect": "Allow",
							"Action": [
								"s3:PutObject",
								"s3:GetObject",
								"s3:DeleteObject"
							],
							"Resource": [
								"*"
							]
						}
					]

				},
				"Roles": [{
					"Ref": "CodeDeployServiceRolenew"
				}]
			}
		},
		"CloudwatchPolicy": {
			"Type": "AWS::IAM::Policy",
			"Properties": {
				"PolicyName": "CloudwatchPolicy",
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"logs:CreateLogGroup",
							"logs:CreateLogStream",
							"logs:PutLogEvents",
							"logs:DescribeLogStreams"
						],
						"Resource": [
							"arn:aws:logs:*:*:*"
						]
					}]
				},
				"Roles": [{
					"Ref": "CodeDeployEC2ServiceRolenew"
				}]
			}
		},
		"MyIamProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Roles": [{
					"Ref": "CodeDeployEC2ServiceRolenew"
				}],
				"InstanceProfileName": "csye-iam-profile"

			}
		},
		"MyLambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"ManagedPolicyArns": [
					"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
					"arn:aws:iam::aws:policy/AmazonSESFullAccess",
					"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
				],
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"lambda.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				}
			}
		},
		"lambdaPermission": {
			"Type": "AWS::Lambda::Permission",
			"Properties": {
				"Action": "lambda:InvokeFunction",
				"FunctionName": {
					"Fn::GetAtt": [
						"MyLambdaFunction",
						"Arn"
					]
				},
				"Principal": "sns.amazonaws.com",
				"SourceArn": {
					"Ref": "MySNSTopic"
				}
			}
		},
		"MyLambdaFunction": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": [
				"MyLambdaRole"
			],
			"Properties": {
				"Code": {
					"S3Bucket": "code-deploy.csye6225-fall2017.karn.com",
					"S3Key": "csye6225-aws-lambda-0.0.1.zip"
				},
				"Role": {
					"Fn::GetAtt": [
						"MyLambdaRole",
						"Arn"
					]
				},
				"Timeout": 60,
				"Handler": "LogEvent::handleRequest",
				"MemorySize": 256,
				"Runtime": "java8"
			}
		},
		"MySNSTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"Subscription": [{
					"Endpoint": {
						"Fn::GetAtt": [
							"MyLambdaFunction",
							"Arn"
						]
					},
					"Protocol": "lambda"
				}],
				"TopicName": "SESTopic"
			}
		}

	}
}
